import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;

public class Main {
    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException {

        String encryptionKey="Get@Solutions@KODESRC#werty54321";

        String dataToEncrypt="Welcome to kodeSrc!";
        String encryptedData=encrypt(dataToEncrypt,encryptionKey);

        System.out.println("Encrypted data: "+encryptedData);

        String decryptedData=decrypt(encryptedData,encryptionKey);
        System.out.println("Decrypted Data: "+decryptedData);


    }
    public static String encrypt(String dataToBeEncrypted, String encryptionKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        //Encryption Key
        String key=encryptionKey;

        Cipher cipher= Cipher.getInstance("AES/CBC/PKCS5Padding");

        //generate IV for encryption, Same IV must be used for decryption
        byte[] iv=new byte[16];
        new SecureRandom().nextBytes(iv);
        IvParameterSpec ivParameterSpec=new IvParameterSpec(iv);

        //generate KeySpec using custom encryption key
        byte[] keyByte=key.getBytes();
        SecretKeySpec secretKeySpec=new SecretKeySpec(keyByte,"AES");


        //Initialize the Cipher and encrypt the data using doFinal method.
        cipher.init(Cipher.ENCRYPT_MODE,secretKeySpec,ivParameterSpec);
        byte[] encryptedDataInBytes = cipher.doFinal(dataToBeEncrypted.getBytes());

        /*Data is now encrypted but as we need to use same IV for decrypting we need to store it somewhere.
        we can store it anywhere but as IV will be random for each encryption its maintainence is difficult.
        So we will pad the iv with the encrypted data and store it. As we only know IV is at what index it cannot be broken easily.
        to make it more random we will add some random byte in beginning
        */

        //generate some random bytes for padding in the beginning
       byte[] randomBytesForPadding=new byte[4];
       new SecureRandom().nextBytes(randomBytesForPadding);

       //This Byte array will have final computed data that we will store at our end.
        byte[] ivAndEncryptedDataCombinedInBytes = new byte[randomBytesForPadding.length+iv.length + encryptedDataInBytes.length];

        //Using System.arrayCopy we will merge the 3 byte arrays
        System.arraycopy(randomBytesForPadding,0,ivAndEncryptedDataCombinedInBytes,0,randomBytesForPadding.length);
        System.arraycopy(iv,0,ivAndEncryptedDataCombinedInBytes,randomBytesForPadding.length,iv.length);
        System.arraycopy(encryptedDataInBytes,0,ivAndEncryptedDataCombinedInBytes,iv.length+randomBytesForPadding.length,encryptedDataInBytes.length);

        //Finally return the encrypted data into Base64 format for storing.
        return Base64.getEncoder().encodeToString(ivAndEncryptedDataCombinedInBytes);
    }
    public static String decrypt(String data, String encryptionKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        //Encryption Key
        String key=encryptionKey;
        //We have encoded the encrypted data before storing it, so we need to first decode it before doing any operations.
        byte[] decodedByte=Base64.getDecoder().decode(data);

        /*
        * We have added 4 random bytes to our final byte array, we need to skip those bytes.
        * Our IV is from 4th index and as IV length is 16 bytes the last index will be 20
        * So to get the IV used for encryption we can slice the byte array from index 4:20
        * */
        byte[] iv=Arrays.copyOfRange(decodedByte,4,20);

        /*
        * Our encrypted data was merged after the IV thus the encrypted bytes will be from index 20 to end of array
        * */
        byte[] encryptedData=Arrays.copyOfRange(decodedByte,20,decodedByte.length);

        //generate the KeySpec
        byte[] keyByte=key.getBytes();
        SecretKeySpec secretKeySpec=new SecretKeySpec(keyByte,"AES");

        /*
        * Once we have the IV , encrypted data, Key. Now we can initialize the Cipher for Decrypting
        * */
        Cipher cipher= Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE,secretKeySpec,new IvParameterSpec(iv));

        //use the doFinal method to decrypt the data , as the output will be a byte array we will convert it into the String and return.
        return new String(cipher.doFinal(encryptedData));
    }
}
